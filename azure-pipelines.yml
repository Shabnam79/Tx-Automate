# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Static_Code_Analysis
  displayName: Static Code Analysis
  jobs:
    - job: SAST
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'DotNetDemoPipeline'
          organization: 'demo-pipeline'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'DevOpsXperts-POC_DotNetDemoPipeline'
          cliProjectName: 'DotNetDemoPipeline'
          cliSources: '.'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

##################################################################################          

- stage: Build
  displayName: Project Build
  jobs:
    - job: Build_Project
      steps:
      # - task: SonarCloudPrepare@1
      #   inputs:
      #     SonarCloud: 'DotNetDemoPipeline'
      #     organization: 'demo-pipeline'
      #     scannerMode: 'MSBuild'
      #     projectKey: 'DevOpsXperts-POC_DotNetDemoPipeline'
      #     projectName: 'DotNetDemoPipeline'
      
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
      
      # - task: SonarCloudAnalyze@1
      # - task: SonarCloudPublish@1
      #   inputs:
      #     pollingTimeoutSec: '300'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '-o $(build.artifactStagingDirectory)'
          zipAfterPublish: false
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(build.artifactStagingDirectory)
          artifact: 'drop'
          publishLocation: 'pipeline'
      # - task: NDependTask@1
      #   inputs:
      #     BinariesOutput: '$(build.artifactStagingDirectory)'
      #   env:
      #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)

############################################################################################
- stage: Unit_Test
  displayName: Running Unit Test
  jobs:
    - job: Unit_Test
      steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '**/*[Tt]est*/*.csproj'
          publishTestResults: true
          arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura --settings:coverage.runsettings'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '**/*cobertura.xml'
steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/MyAppT.csproj'
      
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/MyAppT.csproj'
        arguments: '--configuration $(BuildConfiguration)'
        
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*TestingProject*.csproj'
        publishTestResults: true
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'