
# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Static_Code_Analysis
  displayName: Static Code Analysis
  jobs:
    - job: SAST
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'DotNetDemoPipeline1'
          organization: 'demo-pipeline'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'DevOpsXperts-POC_DotnetDemoPipeline1'
          cliProjectName: 'DotnetDemoPipeline1'
          cliSources: '.'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

##################################################################################          

- stage: Build
  displayName: Project Build
  jobs:
    - job: Build_Project
      steps:
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '**/MyAppT.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '**/MyAppT.csproj'
          arguments: '--configuration $(BuildConfiguration)' 

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
          zipAfterPublish: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(build.artifactStagingDirectory)
          artifact: 'drop'

############################################################################################
- stage: Unit_Test
  displayName: Running Unit Test
  jobs:
    - job: Unit_Test
      steps:
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: 'TestingProject/TestingProject.csproj'
          publishTestResults: true
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code coverage" /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\ '
        continueOnError: true  


    # - task: reportgenerator@5
    #   inputs:
    #     reports: 'TestResults\Coverage\coverage.cobertura.xml'
    #     targetdir: 'coveragereport'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'TestResults\Coverage\coverage.cobertura.xml'

##########################################################################################################################

- stage: Deploy_Stage
  displayName: Deploy Stage
  jobs:
  - job: Deploy
    displayName: Deploy to Web App
    pool: 
      vmImage: 'windows-latest'
    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0    
      displayName: Download WebApp.zip
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        itemPattern: 
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: |
          ls $(System.DefaultWorkingDirectory)
 
    # - task: AzureRmWebAppDeployment@4
    #   inputs:
    #     ConnectionType: 'AzureRM'
    #     azureSubscription: 'Microsoft Partner Network(55cf0ba9-e3c1-4ced-b5e9-5abb7b4d39b1)'
    #     appType: 'webApp'
    #     WebAppName: 'demoapp-service'
    #     packageForLinux: '$(System.DefaultWorkingDirectory)/drop/WebApp.zip'
    #     JSONFiles: '**/appsettings.json'
   