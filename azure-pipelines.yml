
# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- docker

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: DotNetDemoPipeline
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'

stages:
- stage: Static_Code_Analysis
  displayName: Static Code Analysis
  jobs:
    - job: SAST
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'DotNetDemoPipeline1'
          organization: 'demo-pipeline'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'DevOpsXperts-POC_DotnetDemoPipeline1'
          cliProjectName: 'DotnetDemoPipeline1'
          cliSources: '.'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

##################################################################################          

- stage: Docker_Build
  displayName: Project Build
  jobs:
    - job: Build_Project
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerDotNetDemo'
          repository: 'anuj730/jpipeline_demo'
          command: 'buildAndPush'
          Dockerfile: 'MyAppT/Dockerfile'
          tags: 'DotNetDemo-$(Build.BuildId)'


    - job: Selenium
      displayName: Building UI Tests Job
      pool:
        name: Hosted Windows 2019 with VS2019 
        vmImage: 'windows-2019'
        demands: msbuild

      steps:
      - task: NuGetToolInstaller@0
        displayName: Use NuGet

      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          restoreSolution: MyAppT.sln
      - task: MSBuild@1
        displayName: Build project SeleniumUiTest
        inputs:
          solution: UITestingProject/UITestingProject.csproj
          msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: UI-Test'
        inputs:
          ArtifactName: ui-tests
          
########################################################################################################################################

- stage: Docker_Image_Scan
  displayName: Docker image scanning
  jobs:
    - job: Image_Scanning
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker pull bitnami/trivy
            docker run -it trivy-scan bitnami/trivy:latest

      - task: Docker@2
        inputs:
          containerRegistry: 'DockerDotNetDemo'
          command: 'login'
      
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker pull anuj730/jpipeline_demo:DotNetDemo-$(Build.BuildId)
            docker run -t trivy-scan trivy image anuj730/jpipeline_demo:DotNetDemo-$(Build.BuildId)

############################################################################################
- stage: Unit_Test
  displayName: Running Unit Test
  jobs:
    - job: Unit_Test
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK'
        inputs:
          version: 5.x
          performMultiLevelLookup: true
          includePreviewVersions: true
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: 'TestingProject/TestingProject.csproj'
          publishTestResults: true
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code coverage" /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\ '
        continueOnError: true  


      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'TestResults/Coverage/coverage.cobertura.xml'

##########################################################################################################################

# - stage: Infra
#   # condition: succeeded()
#   jobs:
#   - job: Infrastructure
#     displayName: Publish Infra files Job
#     pool:
#       vmImage: 'windows-latest'
#     steps:

#     - task: replacetokens@3
#       inputs:
#         rootDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
#         targetFiles: |
#           variables.tfvars
#         encoding: 'auto'
#         writeBOM: true
#         actionOnMissing: 'warn'
#         keepToken: false
#         tokenPrefix: '__'
#         tokenSuffix: '__'
#         useLegacyPattern: false
#         enableTransforms: false
#         enableTelemetry: true
#       displayName: Replace Token

#     - task: TerraformInstaller@0
#       inputs:
#           terraformVersion: '1.0.2'

#     - task: TerraformTaskV2@2
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
#         backendServiceArm: '$(ARM_SUBSCRIPTION_ID)'
#         backendAzureRmResourceGroupName: '$(ContainerRG)'
#         backendAzureRmStorageAccountName: '$(StorageAccountName)'
#         backendAzureRmContainerName: '$(ContainerName)'
#         backendAzureRmKey: 'DotNetDemo.tfstate'
      
#     - task: TerraformTaskV2@2
#       displayName: Terraform plan
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
#         commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/Terraform/variables.tfvars" -out=tfplan -lock=false'
#         environmentServiceNameAzureRM: '$(ARM_SUBSCRIPTION_ID)'


#     - task: TerraformTaskV2@2
#       displayName: Terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
#         commandOptions: 'tfplan'
#         environmentServiceNameAzureRM: '$(ARM_SUBSCRIPTION_ID)'

# ###################################################################################################################
# - stage: Deploy_Stage
#   displayName: Deploy Stage
#   jobs:
#   - deployment: DotNetDemo
#     displayName: Deploying DotNetCore App
#     environment: DoTNetDemo
    # strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #           - task: SSH@0
    #             inputs:
    #               sshEndpoint: 'DotNetDemoSSH'
    #               runOptions: 'inline'
    #               inline: 'docker run -d -it  -p 80:80/tcp --name DotNetDemo anuj730/jpipeline_demo:7592'
    #               readyTimeout: '20000'
    #           - task: DownloadPipelineArtifact@2
    #             inputs:
    #               buildType: 'current'
    #               artifactName: 'drop'
    #               targetPath: '$(Pipeline.Workspace)'

 
    #           - task: AzureRmWebAppDeployment@4
    #             inputs:
    #               ConnectionType: 'AzureRM'
    #               azureSubscription: '$(ARM_SUBSCRIPTION_ID)'
    #               appType: 'webApp'
    #               WebAppName: 'DotNetDemoAppService'
    #               packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
    #               JSONFiles: '**/appsettings.json'

# ######################################################################################################################

# - stage: UI_test
#   displayName: Selenium UI Testing 
#   # dependsOn: Deploy_Stage
#   jobs:
#   - job: UI_Testing
#     displayName: Automation Testing
#     pool: 
#       vmImage: 'windows-latest'
#     steps:
#       - task: DownloadBuildArtifacts@0    
#         displayName: Download Selenium Tests
#         inputs:
#           buildType: 'current'
#           downloadType: 'single'
#           artifactName: 'ui-tests'
#           itemPattern: ''
#           downloadPath: '$(System.DefaultWorkingDirectory)'


#       - task: VSTest@2
#         displayName: Selenium UI Tests
#         inputs:
#           testSelector: 'testAssemblies'
#           searchFolder: '$(System.DefaultWorkingDirectory)/ui-tests'
#           # runSettingsFile: '$(System.DefaultWorkingDirectory)/ui-tests/.runsettings'
#           # overrideTestrunParameters: '-webAppUrl $(WebAppNameUrl)'
#           testAssemblyVer2: |
#             **\*Test*.dll 
#             !**\*TestAdapter.dll 
#             !**\obj\**
#           runInParallel: false
#           codeCoverageEnabled: false

# ######################################################################################################################################################
# - stage: Destroying_Infra
#   dependsOn: Deploy_Stage
#   jobs:
#   - job: Manual_Vaidation
#     displayName: Manual Validation
#     pool: server
#     timeoutInMinutes: 4320 
#     steps:
      
#       - task: ManualValidation@0
#         inputs:
#           notifyUsers: 'anuj.kumar@testingxperts.com'
#           instructions: 'Please permit the job for further process'
#           onTimeout: 'resume'

#   - job: Infra_Destroy
#     steps:
#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: '$(ARM_SUBSCRIPTION_ID)'
#         scriptType: 'ps'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#             Connect-AzAccount
#              az group delete --name $(rg)  --yes
#         powerShellErrorActionPreference: 'silentlyContinue'
#     displayName: "Deleting the Infrastructure"  