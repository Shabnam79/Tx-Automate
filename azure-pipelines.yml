
# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- docker

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: DotNetDemoPipeline
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'

stages:
- stage: Static_Code_Analysis
  displayName: Static Code Analysis
  jobs:
    - job: SAST
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'DotNetDemoPipeline1'
          organization: 'demo-pipeline'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'DevOpsXperts-POC_DotnetDemoPipeline1'
          cliProjectName: 'DotnetDemoPipeline1'
          cliSources: '.'
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'

##################################################################################          

- stage: Docker_Build
  displayName: Project Build
  jobs:
    - job: Build_Project
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerDotNetDemo'
          repository: 'anuj730/jpipeline_demo'
          command: 'buildAndPush'
          Dockerfile: 'MyAppT/Dockerfile'
          tags: 'DotNetDemo-$(Build.BuildId)'


    - job: Selenium
      displayName: Building UI Tests Job
      pool:
        name: Hosted Windows 2019 with VS2019 
        vmImage: 'windows-2019'
        demands: msbuild

      steps:
      - task: NuGetToolInstaller@0
        displayName: Use NuGet

      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          restoreSolution: MyAppT.sln
      - task: MSBuild@1
        displayName: Build project SeleniumUiTest
        inputs:
          solution: UITestingProject/UITestingProject.csproj
          msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: UI-Test'
        inputs:
          ArtifactName: ui-tests
          
########################################################################################################################################

- stage: Docker_Image_Scan
  displayName: Docker image scanning
  dependsOn: Static_Code_Analysis
  jobs:
    - job: Image_Scanning
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker pull bitnami/trivy
            docker pull anuj730/jpipeline_demo:DotNetDemo-$(Build.BuildId)
            docker run --rm --name trivy bitnami/trivy:latest image anuj730/jpipeline_demo:DotNetDemo-$(Build.BuildId) --format json > trivy_report.json
      
      - task: CopyFiles@2
        inputs:
          Contents: 'trivy_report.json'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'image_scan_report'
          publishLocation: 'Container'

############################################################################################
- stage: Unit_Test
  displayName: Running Unit Test
  jobs:
    - job: Unit_Test
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK'
        inputs:
          version: 5.x
          performMultiLevelLookup: true
          includePreviewVersions: true
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: 'test'
          projects: 'TestingProject/TestingProject.csproj'
          publishTestResults: true
          arguments: '--configuration $(BuildConfiguration) --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "Code coverage" /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\ '
        continueOnError: true  
      
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: 'testresults.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'TestResult'
          publishLocation: 'Container'
      
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'TestResults/Coverage/coverage.cobertura.xml'

##########################################################################################################################

- stage: Quality_Gate
  displayName: "Evaluate Test Results"
  jobs:
    - job: Quality_Gate
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'TestResult'
          itemPattern: '**/*.trx'
          downloadPath: '$(Agent.TempDirectory)'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            failed_tests=`find . -name testresults.trx -type f | xargs cat | grep -E "outcome=\"Failed\""`
            echo $failed_tests
            if [[ -n $failed_tests ]]; then
            echo "Quality gate failed. There are failed tests."
            exit 1
            else
            echo "Quality gate passed. All tests passed."
            fi
          workingDirectory: '$(Agent.TempDirectory)'
       